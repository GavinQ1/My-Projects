

import KnowledgeNodeModels.KnowledgeNodeList;
import KnowledgeNodeModels.KnowledgeNodeImpl;
import KnowledgeNodeModels.KnowledgeNodeListImpl;
import KnowledgeNodeModels.KnowledgeNode;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Gavin
 */
public class TreeNodeTest extends javax.swing.JFrame {
    private KnowledgeNode node;
    private DefaultMutableTreeNode selectedTreeNode;
            
    /**
     * Creates new form TreeNodeTest
     */
    public TreeNodeTest(KnowledgeNode k) {
        this.node = k;
        initComponents();
    }
    
    
    private static class MyNode extends DefaultMutableTreeNode {
        
        public MyNode(Object k) {
            super(k);
        }
        
        public String toString() {
            if (getUserObject() instanceof KnowledgeNode)
                return ((KnowledgeNode) getUserObject()).getName();
            if (getUserObject() instanceof KnowledgeNodeList)
                return ((KnowledgeNodeListImpl) getUserObject()).getName();
            return super.toString();
        }
    }
    
    private void addLeaves(DefaultMutableTreeNode root, KnowledgeNodeList l) {
        for (KnowledgeNode k : l)
            root.add(new MyNode(k));
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MyNode root = new MyNode(node);
        MyNode sources = new MyNode(node.getSources());
        addLeaves(sources, node.getSources());
        MyNode destinations = new MyNode(node.getDestinations());
        addLeaves(destinations, node.getDestinations());
        MyNode neighbors = new MyNode(node.getNeighbors());
        addLeaves(neighbors, node.getNeighbors());
        root.add(sources);
        root.add(destinations);
        root.add(neighbors);
        jTree1 = new javax.swing.JTree(root);
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTree1.setShowsRootHandles(false);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton1)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode n = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        selectedTreeNode = n;
    }//GEN-LAST:event_jTree1ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedTreeNode.getParent();
//        ((DefaultTreeModel) jTree1.getModel()).insertNodeInto(new DefaultMutableTreeNode("Test"), parent, parent.getChildCount());
//            String rootName = JOptionPane.showInputDialog("New Root Name");
//            ((KnowledgeNodeListImpl) selectedTreeNode.getUserObject()).setName(rootName);
//            ((DefaultTreeModel) jTree1.getModel()).nodeChanged(selectedTreeNode);
//            System.out.println("Added");
        DefaultTreeModel m = new DefaultTreeModel(new DefaultMutableTreeNode("New"));
        jTree1.setModel(m);
        m.reload((DefaultMutableTreeNode) m.getRoot());
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void updateTree() {
        DefaultTreeModel model = (DefaultTreeModel) this.jTree1.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        model.reload(root);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TreeNodeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TreeNodeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TreeNodeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TreeNodeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        KnowledgeNode a = new KnowledgeNodeImpl("A", "Character", "A", "First", "Source", "Destination", "Neighbor");
        KnowledgeNode b = new KnowledgeNodeImpl("B", "Character", "B", "Second", "Source", "Destination", "Neighbor");
        KnowledgeNode c = new KnowledgeNodeImpl("C", "Character", "C", "Third", "Source", "Destination", "Neighbor");
        KnowledgeNode d = new KnowledgeNodeImpl("D", "Character", "D", "Fourth", "Source", "Destination", "Neighbor");
        a.addDestination(d);
        d.addSource(c);
        d.addSource(b);
        System.out.println(a.chineseFormattedInformation());
        new TreeNodeTest(a).setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
