Stack :==> [<Goal>, ENDOFFILE]
Popped <Goal> with token PROGRAM (input string: "program"). $ PUSH $  [65] ::= [<program>, ENDMARKER] <File: testfiles/func.pas, line 2>
Stack :==> [<program>, ENDMARKER, ENDOFFILE]
Popped <program> with token PROGRAM (input string: "program"). $ PUSH $  [1] ::= [PROGRAM, IDENTIFIER, <action13>, LEFTPAREN, <identifier_list>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>] <File: testfiles/func.pas, line 2>
Stack :==> [PROGRAM, IDENTIFIER, <action13>, LEFTPAREN, <identifier_list>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped PROGRAM with token PROGRAM (input string: "program"). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [IDENTIFIER, <action13>, LEFTPAREN, <identifier_list>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "funcTest"). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [<action13>, LEFTPAREN, <identifier_list>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [LEFTPAREN, <identifier_list>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped LEFTPAREN with token LEFTPAREN (input string: "("). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [<identifier_list>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list> with token IDENTIFIER (input string: "input"). $ PUSH $  [2] ::= [IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 2>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "input"). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [<action13>, <identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token COMMA (input string: ","). $ PUSH $  [3] ::= [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 2>
Stack :==> [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COMMA with token COMMA (input string: ","). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "output"). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [<action13>, <identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token RIGHTPAREN (input string: ")"). # EPSILON # <File: testfiles/func.pas, line 2>
Stack :==> [RIGHTPAREN, <action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped RIGHTPAREN with token RIGHTPAREN (input string: ")"). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [<action9>, SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [SEMICOLON, <declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped SEMICOLON with token SEMICOLON (input string: ";"). * MATCH * <File: testfiles/func.pas, line 2>
Stack :==> [<declarations>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <declarations> with token VAR (input string: "var"). $ PUSH $  [5] ::= [VAR, <action1>, <declaration_list>, <action2>] <File: testfiles/func.pas, line 3>
Stack :==> [VAR, <action1>, <declaration_list>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped VAR with token VAR (input string: "var"). * MATCH * <File: testfiles/func.pas, line 3>
Stack :==> [<action1>, <declaration_list>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<declaration_list>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <declaration_list> with token IDENTIFIER (input string: "i"). $ PUSH $  [7] ::= [<identifier_list>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>] <File: testfiles/func.pas, line 4>
Stack :==> [<identifier_list>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list> with token IDENTIFIER (input string: "i"). $ PUSH $  [2] ::= [IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 4>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "i"). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [<action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token COMMA (input string: ","). $ PUSH $  [3] ::= [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 4>
Stack :==> [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COMMA with token COMMA (input string: ","). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "j"). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [<action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token COMMA (input string: ","). $ PUSH $  [3] ::= [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 4>
Stack :==> [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COMMA with token COMMA (input string: ","). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "k"). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [<action13>, <identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token COLON (input string: ":"). # EPSILON # <File: testfiles/func.pas, line 4>
Stack :==> [COLON, <type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COLON with token COLON (input string: ":"). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [<type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <type> with token INTEGER (input string: "integer"). $ PUSH $  [10] ::= [<standard_type>] <File: testfiles/func.pas, line 4>
Stack :==> [<standard_type>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <standard_type> with token INTEGER (input string: "integer"). $ PUSH $  [12] ::= [INTEGER, <action4>] <File: testfiles/func.pas, line 4>
Stack :==> [INTEGER, <action4>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped INTEGER with token INTEGER (input string: "integer"). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [<action4>, <action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<action3>, SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [SEMICOLON, <declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped SEMICOLON with token SEMICOLON (input string: ";"). * MATCH * <File: testfiles/func.pas, line 4>
Stack :==> [<declaration_list_tail>, <action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <declaration_list_tail> with token FUNCTION (input string: "function"). # EPSILON # <File: testfiles/func.pas, line 6>
Stack :==> [<action2>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <sub_declarations> with token FUNCTION (input string: "function"). $ PUSH $  [15] ::= [<subprogram_declaration>, <sub_declarations>] <File: testfiles/func.pas, line 6>
Stack :==> [<subprogram_declaration>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <subprogram_declaration> with token FUNCTION (input string: "function"). $ PUSH $  [17] ::= [<action1>, <subprogram_head>, <declarations>, <action5>, <compound_statement>, <action11>] <File: testfiles/func.pas, line 6>
Stack :==> [<action1>, <subprogram_head>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<subprogram_head>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <subprogram_head> with token FUNCTION (input string: "function"). $ PUSH $  [18] ::= [FUNCTION, IDENTIFIER, <action15>, <arguments>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>] <File: testfiles/func.pas, line 6>
Stack :==> [FUNCTION, IDENTIFIER, <action15>, <arguments>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped FUNCTION with token FUNCTION (input string: "function"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [IDENTIFIER, <action15>, <arguments>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "Sum"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action15>, <arguments>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<arguments>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <arguments> with token LEFTPAREN (input string: "("). $ PUSH $  [20] ::= [LEFTPAREN, <action19>, <parameter_list>, RIGHTPAREN, <action20>] <File: testfiles/func.pas, line 6>
Stack :==> [LEFTPAREN, <action19>, <parameter_list>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped LEFTPAREN with token LEFTPAREN (input string: "("). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action19>, <parameter_list>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<parameter_list>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <parameter_list> with token IDENTIFIER (input string: "a"). $ PUSH $  [22] ::= [<identifier_list>, COLON, <type>, <action21>, <parameter_list_tail>] <File: testfiles/func.pas, line 6>
Stack :==> [<identifier_list>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list> with token IDENTIFIER (input string: "a"). $ PUSH $  [2] ::= [IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 6>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "a"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action13>, <identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token COMMA (input string: ","). $ PUSH $  [3] ::= [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>] <File: testfiles/func.pas, line 6>
Stack :==> [COMMA, IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COMMA with token COMMA (input string: ","). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [IDENTIFIER, <action13>, <identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "b"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action13>, <identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<identifier_list_tail>, COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <identifier_list_tail> with token COLON (input string: ":"). # EPSILON # <File: testfiles/func.pas, line 6>
Stack :==> [COLON, <type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COLON with token COLON (input string: ":"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <type> with token INTEGER (input string: "integer"). $ PUSH $  [10] ::= [<standard_type>] <File: testfiles/func.pas, line 6>
Stack :==> [<standard_type>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <standard_type> with token INTEGER (input string: "integer"). $ PUSH $  [12] ::= [INTEGER, <action4>] <File: testfiles/func.pas, line 6>
Stack :==> [INTEGER, <action4>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped INTEGER with token INTEGER (input string: "integer"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action4>, <action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<action21>, <parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<parameter_list_tail>, RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <parameter_list_tail> with token RIGHTPAREN (input string: ")"). # EPSILON # <File: testfiles/func.pas, line 6>
Stack :==> [RIGHTPAREN, <action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped RIGHTPAREN with token RIGHTPAREN (input string: ")"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action20>, COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [COLON, RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped COLON with token COLON (input string: ":"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [RESULT, <standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped RESULT with token RESULT (input string: "result"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<standard_type>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <standard_type> with token INTEGER (input string: "integer"). $ PUSH $  [12] ::= [INTEGER, <action4>] <File: testfiles/func.pas, line 6>
Stack :==> [INTEGER, <action4>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped INTEGER with token INTEGER (input string: "integer"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action4>, SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [SEMICOLON, <action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped SEMICOLON with token SEMICOLON (input string: ";"). * MATCH * <File: testfiles/func.pas, line 6>
Stack :==> [<action16>, <declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<declarations>, <action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <declarations> with token BEGIN (input string: "begin"). # EPSILON # <File: testfiles/func.pas, line 7>
Stack :==> [<action5>, <compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<compound_statement>, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <compound_statement> with token BEGIN (input string: "begin"). $ PUSH $  [25] ::= [BEGIN, <statement_list>, END] <File: testfiles/func.pas, line 7>
Stack :==> [BEGIN, <statement_list>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped BEGIN with token BEGIN (input string: "begin"). * MATCH * <File: testfiles/func.pas, line 7>
Stack :==> [<statement_list>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <statement_list> with token IDENTIFIER (input string: "Sum"). $ PUSH $  [26] ::= [<statement>, <statement_list_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [<statement>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <statement> with token IDENTIFIER (input string: "Sum"). $ PUSH $  [29] ::= [<elementary_statement>] <File: testfiles/func.pas, line 8>
Stack :==> [<elementary_statement>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <elementary_statement> with token IDENTIFIER (input string: "Sum"). $ PUSH $  [34] ::= [IDENTIFIER, <action30>, <es_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [IDENTIFIER, <action30>, <es_tail>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "Sum"). * MATCH * <File: testfiles/func.pas, line 8>
Stack :==> [<action30>, <es_tail>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<es_tail>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <es_tail> with token ASSIGNOP (input string: ":="). $ PUSH $  [36] ::= [<action53>, <subscript>, ASSIGNOP, <expression>, <action31>] <File: testfiles/func.pas, line 8>
Stack :==> [<action53>, <subscript>, ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<subscript>, ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <subscript> with token ASSIGNOP (input string: ":="). $ PUSH $  [39] ::= [<action34>] <File: testfiles/func.pas, line 8>
Stack :==> [<action34>, ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped ASSIGNOP with token ASSIGNOP (input string: ":="). * MATCH * <File: testfiles/func.pas, line 8>
Stack :==> [<expression>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <expression> with token IDENTIFIER (input string: "a"). $ PUSH $  [45] ::= [<simple_expression>, <expression_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [<simple_expression>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <simple_expression> with token IDENTIFIER (input string: "a"). $ PUSH $  [48] ::= [<term>, <simple_expression_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [<term>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <term> with token IDENTIFIER (input string: "a"). $ PUSH $  [52] ::= [<factor>, <term_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [<factor>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <factor> with token IDENTIFIER (input string: "a"). $ PUSH $  [55] ::= [IDENTIFIER, <action46>, <factor_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [IDENTIFIER, <action46>, <factor_tail>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "a"). * MATCH * <File: testfiles/func.pas, line 8>
Stack :==> [<action46>, <factor_tail>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<factor_tail>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <factor_tail> with token ADDOP (input string: "+"). $ PUSH $  [60] ::= [<subscript>, <action48>] <File: testfiles/func.pas, line 8>
Stack :==> [<subscript>, <action48>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <subscript> with token ADDOP (input string: "+"). $ PUSH $  [39] ::= [<action34>] <File: testfiles/func.pas, line 8>
Stack :==> [<action34>, <action48>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<action48>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <term_tail> with token ADDOP (input string: "+"). # EPSILON # <File: testfiles/func.pas, line 8>
Stack :==> [<simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <simple_expression_tail> with token ADDOP (input string: "+"). $ PUSH $  [50] ::= [ADDOP, <action42>, <term>, <action43>, <simple_expression_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [ADDOP, <action42>, <term>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped ADDOP with token ADDOP (input string: "+"). * MATCH * <File: testfiles/func.pas, line 8>
Stack :==> [<action42>, <term>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<term>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <term> with token IDENTIFIER (input string: "b"). $ PUSH $  [52] ::= [<factor>, <term_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [<factor>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <factor> with token IDENTIFIER (input string: "b"). $ PUSH $  [55] ::= [IDENTIFIER, <action46>, <factor_tail>] <File: testfiles/func.pas, line 8>
Stack :==> [IDENTIFIER, <action46>, <factor_tail>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "b"). * MATCH * <File: testfiles/func.pas, line 8>
Stack :==> [<action46>, <factor_tail>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<factor_tail>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <factor_tail> with token END (input string: "end"). $ PUSH $  [60] ::= [<subscript>, <action48>] <File: testfiles/func.pas, line 9>
Stack :==> [<subscript>, <action48>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <subscript> with token END (input string: "end"). $ PUSH $  [39] ::= [<action34>] <File: testfiles/func.pas, line 9>
Stack :==> [<action34>, <action48>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<action48>, <term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<term_tail>, <action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <term_tail> with token END (input string: "end"). # EPSILON # <File: testfiles/func.pas, line 9>
Stack :==> [<action43>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <simple_expression_tail> with token END (input string: "end"). # EPSILON # <File: testfiles/func.pas, line 9>
Stack :==> [<expression_tail>, <action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <expression_tail> with token END (input string: "end"). # EPSILON # <File: testfiles/func.pas, line 9>
Stack :==> [<action31>, <statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<statement_list_tail>, END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <statement_list_tail> with token END (input string: "end"). # EPSILON # <File: testfiles/func.pas, line 9>
Stack :==> [END, <action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped END with token END (input string: "end"). * MATCH * <File: testfiles/func.pas, line 9>
Stack :==> [<action11>, <sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<sub_declarations>, <action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <sub_declarations> with token BEGIN (input string: "begin"). # EPSILON # <File: testfiles/func.pas, line 11>
Stack :==> [<action56>, <compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<compound_statement>, <action55>, ENDMARKER, ENDOFFILE]
Popped <compound_statement> with token BEGIN (input string: "begin"). $ PUSH $  [25] ::= [BEGIN, <statement_list>, END] <File: testfiles/func.pas, line 11>
Stack :==> [BEGIN, <statement_list>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped BEGIN with token BEGIN (input string: "begin"). * MATCH * <File: testfiles/func.pas, line 11>
Stack :==> [<statement_list>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <statement_list> with token IDENTIFIER (input string: "i"). $ PUSH $  [26] ::= [<statement>, <statement_list_tail>] <File: testfiles/func.pas, line 12>
Stack :==> [<statement>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <statement> with token IDENTIFIER (input string: "i"). $ PUSH $  [29] ::= [<elementary_statement>] <File: testfiles/func.pas, line 12>
Stack :==> [<elementary_statement>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <elementary_statement> with token IDENTIFIER (input string: "i"). $ PUSH $  [34] ::= [IDENTIFIER, <action30>, <es_tail>] <File: testfiles/func.pas, line 12>
Stack :==> [IDENTIFIER, <action30>, <es_tail>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped IDENTIFIER with token IDENTIFIER (input string: "i"). * MATCH * <File: testfiles/func.pas, line 12>
Stack :==> [<action30>, <es_tail>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<es_tail>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <es_tail> with token ASSIGNOP (input string: ":="). $ PUSH $  [36] ::= [<action53>, <subscript>, ASSIGNOP, <expression>, <action31>] <File: testfiles/func.pas, line 12>
Stack :==> [<action53>, <subscript>, ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<subscript>, ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <subscript> with token ASSIGNOP (input string: ":="). $ PUSH $  [39] ::= [<action34>] <File: testfiles/func.pas, line 12>
Stack :==> [<action34>, ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [ASSIGNOP, <expression>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped ASSIGNOP with token ASSIGNOP (input string: ":="). * MATCH * <File: testfiles/func.pas, line 12>
Stack :==> [<expression>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <expression> with token INTCONSTANT (input string: "10"). $ PUSH $  [45] ::= [<simple_expression>, <expression_tail>] <File: testfiles/func.pas, line 12>
Stack :==> [<simple_expression>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <simple_expression> with token INTCONSTANT (input string: "10"). $ PUSH $  [48] ::= [<term>, <simple_expression_tail>] <File: testfiles/func.pas, line 12>
Stack :==> [<term>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <term> with token INTCONSTANT (input string: "10"). $ PUSH $  [52] ::= [<factor>, <term_tail>] <File: testfiles/func.pas, line 12>
Stack :==> [<factor>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <factor> with token INTCONSTANT (input string: "10"). $ PUSH $  [56] ::= [<constant>, <action46>] <File: testfiles/func.pas, line 12>
Stack :==> [<constant>, <action46>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <constant> with token INTCONSTANT (input string: "10"). $ PUSH $  [66] ::= [INTCONSTANT] <File: testfiles/func.pas, line 12>
Stack :==> [INTCONSTANT, <action46>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped INTCONSTANT with token INTCONSTANT (input string: "10"). * MATCH * <File: testfiles/func.pas, line 12>
Stack :==> [<action46>, <term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Stack :==> [<term_tail>, <simple_expression_tail>, <expression_tail>, <action31>, <statement_list_tail>, END, <action55>, ENDMARKER, ENDOFFILE]
Popped <term_