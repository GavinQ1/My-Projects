;;; ==========================
;;; CMPU-101, Fall 2015 
;;; Assignement 10
;;; Gavin Qi
;;; ==========================



(require htdp/gui)
(load "score-chart.txt")
(load "dices.txt")
(load "yahtzee.txt")
(load "easy-bill.txt")


;define a frame structure
(define-struct ytz-frame
  (game
   window
   roll-msg
   keep-msg
   result-msg
   roll-left-msg
   round-msg
   player-score-ones
   player-score-twos
   player-score-threes
   player-score-fours
   player-score-fives
   player-score-sixes
   player-score-sum
   player-score-bonus
   player-score-three-of-a-kind
   player-score-four-of-a-kind
   player-score-full-house
   player-score-small-straight
   player-score-large-straight
   player-score-chance
   player-score-yahtzee
   player-score-total
   bill-score-ones
   bill-score-twos
   bill-score-threes
   bill-score-fours
   bill-score-fives
   bill-score-sixes
   bill-score-sum
   bill-score-bonus
   bill-score-three-of-a-kind
   bill-score-four-of-a-kind
   bill-score-full-house
   bill-score-small-straight
   bill-score-large-straight
   bill-score-chance
   bill-score-yahtzee
   bill-score-total
   ))

;;;  SHOW-GAME-IN-FRAME  --  uses DRAW-MESSAGE instead of PRINTF
;;; -----------------------------------------------------------------
;;;  INPUTS:  G, a yahtzee struct
;;;           FR, a YTZ-FRAME struct
;;;  OUTPUT:  None
;;;  SIDE EFFECT: Uses DRAW-MESSAGE to cause appropriate information
;;;    to be displayed in the various MESSAGE boxes belonging to the graphical window.
;;;    The information in G is used to determine what should be displayed in
;;;    the graphical window (depending on the current state of the game).

(define show-game-in-frame
  (lambda (g fr)
    (let* ((dicey (yahtzee-dices g))
           (result-msgs (yahtzee-result-str g))
           (roll-msg (format "~A" (dices-get-roll dicey)))
           (round-msg (format "~A" (yahtzee-rounds g)))
           (keep-msgs (format "~A" (dices-what-to-keep? (yahtzee-dices g))))
           (roll-left-msgs (number->string (yahtzee-roll-left g)))
           (player-chart (yahtzee-score-chart-player g))
           (bill-chart (yahtzee-score-chart-bill g))
           (temp-chart (yahtzee-score-chart-temp g)))
      
      (draw-message (ytz-frame-roll-msg fr)
                    (if (equal? roll-msg "#(0 0 0 0 0)")
                        "_ _ _ _ _"
                        roll-msg))
      
      (draw-message (ytz-frame-result-msg fr)
                    (if (equal? result-msgs "")
                        "_________"
                        result-msgs))
      
      (draw-message (ytz-frame-keep-msg fr)
                    (if (equal? keep-msgs "()")
                        "_ _ _ _ _"
                        keep-msgs))
      
      (draw-message (ytz-frame-round-msg fr)
                    round-msg)
      
      (draw-message (ytz-frame-roll-left-msg fr)
                    roll-left-msgs)
      
      
      (draw-message (ytz-frame-player-score-ones fr)
                    (format "~A" (if (not (vector-ref player-chart 1))
                                     (format "*~A" (vector-ref temp-chart 0))
                                     (vector-ref player-chart 0))))
      
      (draw-message (ytz-frame-player-score-twos fr)
                    (format "~A" (if (not (vector-ref player-chart 3))
                                     (format "*~A" (vector-ref temp-chart 2))
                                     (vector-ref player-chart 2))))
      
      (draw-message (ytz-frame-player-score-threes fr)
                    (format "~A" (if (not (vector-ref player-chart 5))
                                     (format "*~A" (vector-ref temp-chart 4))
                                     (vector-ref player-chart 4))))
      
      (draw-message (ytz-frame-player-score-fours fr)
                    (format "~A" (if (not (vector-ref player-chart 7))
                                     (format "*~A" (vector-ref temp-chart 6))
                                     (vector-ref player-chart 6))))
      
      (draw-message (ytz-frame-player-score-fives fr)
                    (format "~A" (if (not (vector-ref player-chart 9))
                                     (format "*~A" (vector-ref temp-chart 8))
                                     (vector-ref player-chart 8))))
      
      (draw-message (ytz-frame-player-score-sixes fr)
                    (format "~A" (if (not (vector-ref player-chart 11))
                                     (format "*~A" (vector-ref temp-chart 10))
                                     (vector-ref player-chart 10))))
      
      (draw-message (ytz-frame-player-score-sum fr)
                    (format "~A" (if (eq? 0 (vector-ref player-chart 12))
                                     (vector-ref temp-chart 12)
                                     (vector-ref player-chart 12))))
      
      (draw-message (ytz-frame-player-score-bonus fr)
                    (format "~A" (if (eq? 0 (vector-ref player-chart 14))
                                     (vector-ref temp-chart 14)
                                     (vector-ref player-chart 14))))
      
      (draw-message (ytz-frame-player-score-three-of-a-kind fr)
                    (format "~A" (if (not (vector-ref player-chart 17))
                                     (format "*~A" (vector-ref temp-chart 16))
                                     (vector-ref player-chart 16))))
      
      (draw-message (ytz-frame-player-score-four-of-a-kind fr)
                    (format "~A" (if (not (vector-ref player-chart 19))
                                     (format "*~A" (vector-ref temp-chart 18))
                                     (vector-ref player-chart 18))))
      
      (draw-message (ytz-frame-player-score-full-house fr)
                    (format "~A" (if (not (vector-ref player-chart 21))
                                     (format "*~A" (vector-ref temp-chart 20))
                                     (vector-ref player-chart 20))))
      
      (draw-message (ytz-frame-player-score-small-straight fr)
                    (format "~A" (if (not (vector-ref player-chart 23))
                                     (format "*~A" (vector-ref temp-chart 22))
                                     (vector-ref player-chart 22))))
      
      (draw-message (ytz-frame-player-score-large-straight fr)
                    (format "~A" (if (not (vector-ref player-chart 25))
                                     (format "*~A" (vector-ref temp-chart 24))
                                     (vector-ref player-chart 24))))
      
      (draw-message (ytz-frame-player-score-chance fr)
                    (format "~A" (if (not (vector-ref player-chart 27))
                                     (format "*~A" (vector-ref temp-chart 26))
                                     (vector-ref player-chart 26))))
      
      (draw-message (ytz-frame-player-score-yahtzee fr)
                    (format "~A" (if (not (vector-ref player-chart 29))
                                     (format "*~A" (vector-ref temp-chart 28))
                                     (vector-ref player-chart 28))))
      
      (draw-message (ytz-frame-player-score-total fr)
                    (format "~A" (if (eq? 0 (vector-ref player-chart 30))
                                     (vector-ref temp-chart 30)
                                     (vector-ref player-chart 30))))
      
      (draw-message (ytz-frame-bill-score-ones fr)
                    (format "~A" (vector-ref bill-chart 0)))
      
      (draw-message (ytz-frame-bill-score-twos fr)
                    (format "~A" (vector-ref bill-chart 2)))
      
      (draw-message (ytz-frame-bill-score-threes fr)
                    (format "~A" (vector-ref bill-chart 4)))
      
      (draw-message (ytz-frame-bill-score-fours fr)
                    (format "~A" (vector-ref bill-chart 6)))
      
      (draw-message (ytz-frame-bill-score-fives fr)
                    (format "~A" (vector-ref bill-chart 8)))
      
      (draw-message (ytz-frame-bill-score-sixes fr)
                    (format "~A" (vector-ref bill-chart 10)))
      
      (draw-message (ytz-frame-bill-score-sum fr)
                    (format "~A" (vector-ref bill-chart 12)))
      
      (draw-message (ytz-frame-bill-score-bonus fr)
                    (format "~A" (vector-ref bill-chart 14)))
      
      (draw-message (ytz-frame-bill-score-three-of-a-kind fr)
                    (format "~A" (vector-ref bill-chart 16)))
      
      (draw-message (ytz-frame-bill-score-four-of-a-kind fr)
                    (format "~A" (vector-ref bill-chart 18)))
      
      (draw-message (ytz-frame-bill-score-full-house fr)
                    (format "~A" (vector-ref bill-chart 20)))
      
      (draw-message (ytz-frame-bill-score-small-straight fr)
                    (format "~A" (vector-ref bill-chart 22)))
      
      (draw-message (ytz-frame-bill-score-large-straight fr)
                    (format "~A" (vector-ref bill-chart 24)))
      
      (draw-message (ytz-frame-bill-score-chance fr)
                    (format "~A" (vector-ref bill-chart 26)))
      
      (draw-message (ytz-frame-bill-score-yahtzee fr)
                    (format "~A" (vector-ref bill-chart 28)))
      
      (draw-message (ytz-frame-bill-score-total fr)
                    (format "~A" (vector-ref bill-chart 30))))))


;;;  CREATE-YTZ-FRAME
;;; --------------------------------------------
;;;  INPUTS:  None
;;;  OUTPUT:  A suitably initialized YTZ-FRAME for a new game of yahtzee!
;;; --------------------------------------------
;;;  Uses MAKE-MESSAGE to create new MESSAGE boxes for the graphical frame.
;;;  Uses MAKE-BUTTON to create new BUTTONs in the graphical frame.
;;;    Note that each button has a FUNCTION associated with it.
;;;    MAKE-BUTTON establishes things so that when the button in the
;;;    graphical window is pressed, the corresponding function is called!
;;;  Uses CREATE-WINDOW to create the graphical window

(define create-ytz-frame
  (lambda ()
    (letrec (
             (g (make-yahtzee-wr))
             (state (yahtzee-state g))
             (roll-msg (make-message "_ _ _ _ _"))
             (keep-msg (make-message "_ _ _ _ _"))
             (result-msg (make-message "_________"))
             (roll-left-msg (make-message "3"))
             (round-msg (make-message "13"))
             (player-score-ones (make-message "0"))
             (player-score-twos (make-message "0"))
             (player-score-threes (make-message "0"))
             (player-score-fours (make-message "0"))
             (player-score-fives (make-message "0"))
             (player-score-sixes (make-message "0"))
             (player-score-sum (make-message "0"))
             (player-score-bonus (make-message "0"))
             (player-score-three-of-a-kind (make-message "0")) 
             (player-score-four-of-a-kind (make-message "0"))
             (player-score-full-house (make-message "0"))
             (player-score-small-straight (make-message "0"))
             (player-score-large-straight (make-message "0"))
             (player-score-chance (make-message "0"))
             (player-score-yahtzee (make-message "0"))
             (player-score-total (make-message "0"))
             (bill-score-ones (make-message "0"))
             (bill-score-twos (make-message "0")) 
             (bill-score-threes (make-message "0"))
             (bill-score-fours (make-message "0"))
             (bill-score-fives (make-message "0"))
             (bill-score-sixes (make-message "0"))
             (bill-score-sum (make-message "0"))
             (bill-score-bonus (make-message "0"))
             (bill-score-three-of-a-kind (make-message "0"))
             (bill-score-four-of-a-kind (make-message "0"))
             (bill-score-full-house (make-message "0"))
             (bill-score-small-straight (make-message "0"))
             (bill-score-large-straight (make-message "0"))
             (bill-score-chance (make-message "0"))
             (bill-score-yahtzee (make-message "0"))
             (bill-score-total (make-message "0"))
             (fr (make-ytz-frame g
                                 ()
                                 roll-msg
                                 keep-msg
                                 result-msg
                                 roll-left-msg
                                 round-msg
                                 player-score-ones
                                 player-score-twos
                                 player-score-threes
                                 player-score-fours
                                 player-score-fives
                                 player-score-sixes
                                 player-score-sum
                                 player-score-bonus
                                 player-score-three-of-a-kind
                                 player-score-four-of-a-kind
                                 player-score-full-house
                                 player-score-small-straight
                                 player-score-large-straight
                                 player-score-chance
                                 player-score-yahtzee
                                 player-score-total
                                 bill-score-ones
                                 bill-score-twos
                                 bill-score-threes
                                 bill-score-fours
                                 bill-score-fives
                                 bill-score-sixes
                                 bill-score-sum
                                 bill-score-bonus
                                 bill-score-three-of-a-kind
                                 bill-score-four-of-a-kind
                                 bill-score-full-house
                                 bill-score-small-straight
                                 bill-score-large-straight
                                 bill-score-chance
                                 bill-score-yahtzee
                                 bill-score-total))
             (win (create-window
                   (list
                    (list (make-message "==============================================================="))
                    (list (make-message "------------------------------------------------Player------------------------Bill--------------------------"))
                    (list (make-message "Ones:                ") 
                          player-score-ones    
                          bill-score-ones 
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 0)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Twos:                ") 
                          player-score-twos            
                          bill-score-twos            
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 2)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Threes:             ") 
                          player-score-threes           
                          bill-score-threes           
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 4)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Fours:               ") 
                          player-score-fours           
                          bill-score-fours        
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 6)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Fives:                ")
                          player-score-fives           
                          bill-score-fives          
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 8)
                                         (show-game-in-frame g fr)
                                         #t)))
                    
                    (list (make-message "Sixes:                ")
                          player-score-sixes          
                          bill-score-sixes          
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 10)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Sum:                  ") 
                          player-score-sum           
                          bill-score-sum           
                          (make-button "             "
                                       (lambda (e)
                                         (convert-to-result-str! g "do not touch me~")
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Bonus:               ")
                          player-score-bonus            
                          bill-score-bonus
                          (make-button "             "
                                       (lambda (e)
                                         (convert-to-result-str! g "no no place~")
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Three of a kind:")
                          player-score-three-of-a-kind       
                          bill-score-three-of-a-kind        
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 16)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Four of a kind:  ") 
                          player-score-four-of-a-kind        
                          bill-score-four-of-a-kind         
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 18)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Full house:        ") 
                          player-score-full-house          
                          bill-score-full-house           
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 20)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Small straight:   ") 
                          player-score-small-straight       
                          bill-score-small-straight       
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 22)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Large straight:  ")
                          player-score-large-straight      
                          bill-score-large-straight        
                          (make-button "Score it!"
                                       (lambda (e)
                                         (scoring! g (yahtzee-score-chart-player g) 24)
                                         (show-game-in-frame g fr)
                                         #t)))
                    (list (make-message "Chance:            ")
                          player-score-chance          
                          bill-score-chance           
                              (make-button "Score it!"
                                           (lambda (e)
                                             (scoring! g (yahtzee-score-chart-player g) 26)
                                             (show-game-in-frame g fr)
                                             #t)))
                    (list (make-message "YAHTZEE!:        ") 
                          player-score-yahtzee           
                          bill-score-yahtzee            
                              (make-button "Score it!"
                                           (lambda (e)
                                             (scoring! g (yahtzee-score-chart-player g) 28)
                                             (show-game-in-frame g fr)
                                             #t)))
                    (list (make-message "Total:                ")
                          player-score-total 
                          bill-score-total 
                          (make-button "la~la~la"
                                       (lambda (e)
                                         (convert-to-result-str! g "do not touch me~")
                                         (show-game-in-frame g fr)
                                         #t)))
                    
                    (list (make-message "Rolling Dice:                      ") 
                          roll-msg 
                          (make-button "ROLL ME!"
                                       (lambda (e)
                                         (start g)
                                         (show-game-in-frame g fr)
                                         #t)))
                    
                    (list (make-message "What to keep?:          ") 
                          keep-msg 
                          (make-button "Clear"
                                       (lambda (e)
                                         (clear-keep-list! g)
                                         (show-game-in-frame g fr)
                                         #t)))
                    
                    
                    (list (make-message "Result:             ")
                          result-msg)
                    (list (make-message "Roll chance left:")
                          roll-left-msg)
                    (list (make-message "Rounds left:       ")
                          round-msg)
                    
                    (list
                     (make-button "1"
                                  (lambda (e)
                                    (keep! g 1)
                                    (show-game-in-frame g fr)
                                    #t))
                     (make-button "2"
                                  (lambda (e)
                                    (keep! g 2)
                                    (show-game-in-frame g fr)
                                    #t))
                     (make-button "3"
                                  (lambda (e)
                                    (keep! g 3)
                                    (show-game-in-frame g fr)
                                    #t))
                     (make-button "4"
                                  (lambda (e)
                                    (keep! g 4)
                                    (show-game-in-frame g fr)
                                    #t))
                     (make-button "5"
                                  (lambda (e)
                                    (keep! g 5)
                                    (show-game-in-frame g fr)
                                    #t))
                     (make-button "6"
                                  (lambda (e)
                                    (keep! g 6)
                                    (show-game-in-frame g fr)
                                    #t)))
                    
                    (list (make-button "Quit"
                                       (lambda (e)
                                         (hide-window win)
                                         #t))
                          (make-button "Restart"
                                       (lambda (e)
                                         ;(hide-window win)
                                         ;(let ((f (create-ytz-frame)))
                                         (reset-yahtzee! g)
                                         (show-game-in-frame g fr)
                                         #t))
                          (make-button "Switch/Continue"
                                       (lambda (e)
                                         (switch/continue! g)
                                         (show-game-in-frame g fr)
                                         #t)))))))
      
      
      
      
      
      (show-game-in-frame g fr)
      fr)))

(define f (create-ytz-frame))

